'use strict';

exports.__esModule = true;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _shallowequal = require('shallowequal');

var _shallowequal2 = _interopRequireDefault(_shallowequal);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PersistentTabPanel = function (_Component) {
  _inherits(PersistentTabPanel, _Component);

  function PersistentTabPanel(props, context) {
    _classCallCheck(this, PersistentTabPanel);

    var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));

    _this.state = {
      shouldRender: props.tabId === context.selectedTabId,
      isSelected: props.tabId === context.selectedTabId
    };
    return _this;
  }

  PersistentTabPanel.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps, nextContext) {
    var isSelected = nextContext.selectedTabId === nextProps.tabId;
    if (isSelected && !this.state.shouldRender) {
      this.setState({ shouldRender: true });
    }
    this.setState({ isSelected: isSelected });
  };

  PersistentTabPanel.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState, nextContext) {
    if (!this.state.isSelected && !nextState.isSelected) {
      return false;
    }
    return !(0, _shallowequal2.default)(this.props, nextProps) || !(0, _shallowequal2.default)(this.context, nextContext);
  };

  PersistentTabPanel.prototype.render = function render() {
    if (!this.state.shouldRender) {
      return false;
    }

    var _props = this.props;
    var children = _props.children;
    var className = _props.className;
    var isSelected = this.state.isSelected;


    return _react2.default.createElement(
      'section',
      { className: (0, _classnames2.default)('TabPanel', className),
        style: { display: isSelected ? undefined : 'none' }
      },
      children
    );
  };

  return PersistentTabPanel;
}(_react.Component);

exports.default = PersistentTabPanel;


PersistentTabPanel.propTypes = {
  children: _react.PropTypes.node,
  tabId: _react.PropTypes.any.isRequired
};

PersistentTabPanel.contextTypes = {
  selectedTabId: _react.PropTypes.any
};